server:
  # This is the name following the server:port
  contextPath: /sentinel-auth-server
  # The port on which the AuthServer will listen
  port: 8081

# Details about the database server where the oauth DDL and DML was run:
oauthdb:
  jdbc:
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/oauth2db
    user: oauth2user
    pass: password

# Details about the database server User info lives:
userdb:
  jdbc:
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/in4medb
    user: in4meuser
    pass: password


# Note the below queries can be any queries so long as the data in the
# SELECT list and WHERE clause is retained.
query:
    # This query returns the username and password, given a username
    usersByUsername: SELECT user_name, password, enabled FROM user WHERE user_name=?

    # This query returns username and authorities, given a username
    # Sample:
    # authoritiesByUsername: SELECT username, authority FROM authorities WHERE username=?
    #
    # Note that the first element in this SELECT list below is never used by Spring and can therefore be 'dummied-out'
    # But it needs to exist so that Spring can access the second argument at index 2.
    authoritiesByUsername: |
                 SELECT DISTINCT 'username', permission FROM role_permission rp
                 WHERE rp.role_id IN
                       (SELECT role.role_id
                        FROM user
                        INNER JOIN user_role ON user.user_id = user_role.user_id
                        INNER JOIN role role ON user_role.role_id = role.role_id WHERE user.user_name = ? )


    # This query can be used to return ANY data from the customdb so long as the following rules are followed:
    # The SELECT list should contain at least two columns labeled 'key' and 'value'. If other elements exist in
    # the SELECT list *after* these two, they will be ignored.
    # The WHERE clause MUST be as shown below. The username must be supplied by the caller of the query.
    additionalInfoQuery: |
          SELECT 'role' AS 'key' , role.name AS 'value'
          FROM user
          INNER JOIN user_role ON user.user_id = user_role.user_id
          INNER JOIN role role ON user_role.role_id = role.role_id WHERE user.user_name = ?

    industryQuery: |
          SELECT 'industry' AS 'key' , user.industry AS 'value'
          FROM user
          WHERE user.user_name = ?

jwt:
  accessTokenValidityInSeconds: 36000
  refreshTokenValidityInSeconds: 360000
